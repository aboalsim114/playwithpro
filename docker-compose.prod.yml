# ===========================================
# PlayWithPro - Production Docker Compose
# Optimized for production deployment
# ===========================================

version: '3.8'

services:
  # ===========================================
  # Production Application
  # ===========================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: playwithpro-app
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
    networks:
      - playwithpro-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================
  # Nginx Reverse Proxy
  # ===========================================
  nginx:
    image: nginx:1.25-alpine
    container_name: playwithpro-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - playwithpro-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===========================================
  # Monitoring with Prometheus
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: playwithpro-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - playwithpro-prod-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ===========================================
  # Log Aggregation with Grafana
  # ===========================================
  grafana:
    image: grafana/grafana:latest
    container_name: playwithpro-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - playwithpro-prod-network
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# ===========================================
# Networks
# ===========================================
networks:
  playwithpro-prod-network:
    driver: bridge
    name: playwithpro-prod-network

# ===========================================
# Volumes
# ===========================================
volumes:
  nginx_logs:
    name: playwithpro-nginx-logs
  prometheus_data:
    name: playwithpro-prometheus-data
  grafana_data:
    name: playwithpro-grafana-data
